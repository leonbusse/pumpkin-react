[{"/Users/leon/Projects/pumpkin-react/src/index.tsx":"1","/Users/leon/Projects/pumpkin-react/src/reportWebVitals.ts":"2","/Users/leon/Projects/pumpkin-react/src/App.tsx":"3","/Users/leon/Projects/pumpkin-react/src/api/pumpkin.ts":"4","/Users/leon/Projects/pumpkin-react/src/state.ts":"5","/Users/leon/Projects/pumpkin-react/src/api/spotify.ts":"6","/Users/leon/Projects/pumpkin-react/src/pages/Landing/index.tsx":"7","/Users/leon/Projects/pumpkin-react/src/pages/CreateLink/index.tsx":"8","/Users/leon/Projects/pumpkin-react/src/pages/Share/index.tsx":"9","/Users/leon/Projects/pumpkin-react/src/pages/LinkCreated/index.tsx":"10","/Users/leon/Projects/pumpkin-react/src/pages/SpotifyCallbackHandler/index.tsx":"11","/Users/leon/Projects/pumpkin-react/src/util.ts":"12","/Users/leon/Projects/pumpkin-react/src/components/Loading/index.tsx":"13","/Users/leon/Projects/pumpkin-react/src/components/SwipeCard/index.tsx":"14","/Users/leon/Projects/pumpkin-react/src/components/SongSwiper/index.tsx":"15","/Users/leon/Projects/pumpkin-react/src/components/PlayButton/index.tsx":"16"},{"size":500,"mtime":1609599587485,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1609428848843,"results":"19","hashOfConfig":"18"},{"size":1118,"mtime":1609584654631,"results":"20","hashOfConfig":"18"},{"size":2612,"mtime":1609592319150,"results":"21","hashOfConfig":"18"},{"size":776,"mtime":1609521726196,"results":"22","hashOfConfig":"18"},{"size":487,"mtime":1609516931300,"results":"23","hashOfConfig":"18"},{"size":724,"mtime":1609523102586,"results":"24","hashOfConfig":"18"},{"size":1168,"mtime":1609522874524,"results":"25","hashOfConfig":"18"},{"size":3267,"mtime":1609598850443,"results":"26","hashOfConfig":"18"},{"size":841,"mtime":1609523399425,"results":"27","hashOfConfig":"18"},{"size":756,"mtime":1609523005969,"results":"28","hashOfConfig":"18"},{"size":110,"mtime":1609586629134,"results":"29","hashOfConfig":"18"},{"size":391,"mtime":1609587300732,"results":"30","hashOfConfig":"18"},{"size":748,"mtime":1609593216941,"results":"31","hashOfConfig":"18"},{"size":681,"mtime":1609597592679,"results":"32","hashOfConfig":"18"},{"size":389,"mtime":1609599456573,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"11kbe7z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leon/Projects/pumpkin-react/src/index.tsx",[],["71","72"],"/Users/leon/Projects/pumpkin-react/src/reportWebVitals.ts",[],"/Users/leon/Projects/pumpkin-react/src/App.tsx",[],"/Users/leon/Projects/pumpkin-react/src/api/pumpkin.ts",["73"],"import { sleep } from \"../util\";\n\nasync function ping() {\n  console.log(\"ping...\");\n  return fetch(\"http://localhost:8080/api/v1/ping\")\n    .then((response) => response.text())\n    .then((data) => console.log(\"response: \" + data));\n}\n\nasync function createShareLink(spotifyAccessToken: string): Promise<string> {\n  console.log(\"createShareLink...\");\n  const response = await fetch(\"http://localhost:8080/api/v1/import\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ spotifyAccessToken: spotifyAccessToken }),\n  });\n  const data = await response.json();\n  console.log(\"response: \", data);\n  return data.shareLink;\n}\n\nasync function fetchTracks(\n  userId: string,\n  offset: number,\n  limit: number\n): Promise<SpotifyTrack[]> {\n  console.log(\"fetchTracks...\");\n  const url = `http://localhost:8080/api/v1/tracks/${userId}?offset=${offset}&limit=${limit}`;\n\n  const response = await fetch(url, {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n  const data = await response.json();\n  console.log(\"response: \", data);\n  return data;\n}\n\nasync function fetchUser(userId: string): Promise<SpotifyUser> {\n  console.log(\"fetchUser...\");\n  const url = `http://localhost:8080/api/v1/user/${userId}`;\n\n  const response = await fetch(url, {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n  const data = await response.json();\n  console.log(\"response: \", data);\n  return data;\n}\n\nasync function likeTrack(\n  userId: string,\n  libraryUserId: string,\n  trackId: string\n) {\n  console.log(\"likeTrack \" + trackId);\n  const url = `http://localhost:8080/api/v1/like`;\n\n  const response = await fetch(url, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      userId: userId,\n      libraryUserId: libraryUserId,\n      trackIds: [trackId],\n    }),\n  });\n  const data = await response.text();\n  console.log(\"response: \", data);\n  return data;\n}\n\ninterface SpotifyTrack {\n  id: string;\n  name: string;\n  preview_url: string | null;\n  album: SpotifyAlbum;\n  artist: SpotifyArtist | null;\n}\n\ninterface SpotifyUser {\n  id: string;\n  display_name: string;\n  email: string;\n  product: string;\n}\n\ninterface SpotifyAlbum {\n  id: string;\n  name: string;\n  artists: SpotifyArtist[];\n  images: SpotifyImage[];\n}\n\ninterface SpotifyImage {\n  url: string;\n  hieght: number;\n  width: number;\n}\n\ninterface SpotifyArtist {\n  id: string;\n  name: string;\n}\n\nexport { ping, createShareLink, fetchTracks, fetchUser, likeTrack };\nexport type {\n  SpotifyAlbum,\n  SpotifyArtist,\n  SpotifyImage,\n  SpotifyTrack,\n  SpotifyUser,\n};\n","/Users/leon/Projects/pumpkin-react/src/state.ts",[],"/Users/leon/Projects/pumpkin-react/src/api/spotify.ts",[],"/Users/leon/Projects/pumpkin-react/src/pages/Landing/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/pages/CreateLink/index.tsx",["74"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { createShareLink } from \"../../api/pumpkin\";\nimport { GlobalStateContext, SpotifyState } from \"../../state\";\n\nfunction CreateLinkPage() {\n  const globalState = useContext(GlobalStateContext);\n  const spotifyState: SpotifyState = globalState.spotify;\n  const setPumpkinState = globalState.setPumpkinState;\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function a() {\n      if (spotifyState.accessToken) {\n        const shareLink = await createShareLink(spotifyState.accessToken);\n        setPumpkinState({ shareLink: shareLink });\n        setLoading(false);\n      }\n    }\n    a();\n  }, []);\n\n  if (!spotifyState.accessToken) {\n    console.error(\"no Spotify accessToken available\");\n    return (\n      <>\n        <Redirect to=\"/\" />\n      </>\n    );\n  }\n\n  if (!loading) {\n    return <Redirect to=\"/link-created\" />;\n  }\n  return (\n    <div className=\"App__container\">\n      <header>\n        <h1>Pumpkin</h1>\n        <h2>Your link is being generated...</h2>\n      </header>\n    </div>\n  );\n}\n\nexport { CreateLinkPage };\n","/Users/leon/Projects/pumpkin-react/src/pages/Share/index.tsx",["75"],"import React, { FC, useEffect, useState, useRef } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  fetchTracks,\n  fetchUser,\n  likeTrack,\n  SpotifyTrack,\n  SpotifyUser,\n} from \"../../api/pumpkin\";\nimport { Loading } from \"../../components/Loading\";\nimport { SwipeCard } from \"../../components/SwipeCard\";\nimport { SongSwiper } from \"../../components/SongSwiper\";\nimport { PlayButton } from \"../../components/PlayButton\";\n\ninterface SharePagePathParams {\n  id: string;\n}\n\nconst SharePage: FC = () => {\n  const { id } = useParams<SharePagePathParams>();\n  const { tracks, user } = useSharePageData(id);\n\n  const [trackIndex, setTrackIndex] = useState<number>(0);\n  const [playing, setPlayling] = useState(false);\n  const audioPlayer = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    if (audioPlayer && audioPlayer.current) {\n      if (playing) {\n        audioPlayer.current.play();\n      }\n    }\n  }, [trackIndex]);\n\n  const onSwipe = (direction: string) => {\n    console.log(\"onSwipe: \" + direction);\n    if (direction === \"right\") {\n      user && tracks && likeTrack(user.id, user.id, tracks[trackIndex].id);\n    }\n  };\n\n  const onCardLeftScreen = async (myIdentifier: string) => {\n    console.log(\"onCardLeftScreen: \" + myIdentifier);\n    setTrackIndex(trackIndex + 1);\n  };\n\n  const togglePlayback = () => {\n    if (audioPlayer && audioPlayer.current) {\n      if (audioPlayer.current.paused) {\n        audioPlayer.current.play();\n        setPlayling(true);\n      } else {\n        audioPlayer.current.pause();\n        setPlayling(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App__container\">\n      <header>\n        <h1>Pumpkin</h1>\n      </header>\n      <Loading\n        predicate={() => tracks !== null && user !== null}\n        placeholder={() => <p>loading...</p>}\n      >\n        {tracks && (\n          <>\n            <section className=\"SharePage__swipe-container\">\n              <h2>This is {user?.display_name}'s library</h2>\n              <div className=\"SharePage__swipe-cards-wrapper\">\n                <SongSwiper\n                  track={tracks[trackIndex]}\n                  onSwipe={onSwipe}\n                  onCardLeftScreen={onCardLeftScreen}\n                />\n                <div className=\"SharePage__card-preview\">\n                  <SwipeCard track={tracks[trackIndex + 1]} />\n                </div>\n              </div>\n              <audio\n                src={tracks[trackIndex].preview_url as string}\n                ref={audioPlayer}\n                onEnded={() => setPlayling(false)}\n              />\n              <PlayButton onClick={togglePlayback} playing={playing} />\n            </section>\n          </>\n        )}\n      </Loading>\n      <br />\n      <Link to=\"/\">Back</Link>\n    </div>\n  );\n};\n\nfunction useSharePageData(id: string) {\n  const [tracks, setTracks] = useState<SpotifyTrack[] | null>(null);\n  useEffect(() => {\n    (async () => {\n      const tracks = await fetchTracks(id, 0, 100);\n      setTracks(tracks);\n    })();\n  }, [id]);\n\n  const [user, setUser] = useState<SpotifyUser | null>(null);\n  useEffect(() => {\n    (async () => {\n      const user = await fetchUser(id);\n      setUser(user);\n    })();\n  }, [id]);\n\n  return { user, tracks };\n}\n\nexport { SharePage };\n","/Users/leon/Projects/pumpkin-react/src/pages/LinkCreated/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/pages/SpotifyCallbackHandler/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/util.ts",[],["76","77"],"/Users/leon/Projects/pumpkin-react/src/components/Loading/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/SwipeCard/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/SongSwiper/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/PlayButton/index.tsx",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":21,"column":6,"nodeType":"88","endLine":21,"endColumn":8,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":33,"column":6,"nodeType":"88","endLine":33,"endColumn":18,"suggestions":"91"},{"ruleId":"78","replacedBy":"92"},{"ruleId":"80","replacedBy":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'sleep' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setPumpkinState' and 'spotifyState.accessToken'. Either include them or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has a missing dependency: 'playing'. Either include it or remove the dependency array.",["97"],["94"],["95"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [setPumpkinState, spotifyState.accessToken]",{"range":"102","text":"103"},"Update the dependencies array to be: [playing, trackIndex]",{"range":"104","text":"105"},[735,737],"[setPumpkinState, spotifyState.accessToken]",[936,948],"[playing, trackIndex]"]