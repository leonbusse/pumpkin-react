[{"/Users/leon/Projects/pumpkin-react/src/index.tsx":"1","/Users/leon/Projects/pumpkin-react/src/reportWebVitals.ts":"2","/Users/leon/Projects/pumpkin-react/src/App.tsx":"3","/Users/leon/Projects/pumpkin-react/src/api/pumpkin.ts":"4","/Users/leon/Projects/pumpkin-react/src/state.ts":"5","/Users/leon/Projects/pumpkin-react/src/api/spotify.ts":"6","/Users/leon/Projects/pumpkin-react/src/pages/Landing/index.tsx":"7","/Users/leon/Projects/pumpkin-react/src/pages/CreateLink/index.tsx":"8","/Users/leon/Projects/pumpkin-react/src/pages/Share/index.tsx":"9","/Users/leon/Projects/pumpkin-react/src/pages/LinkCreated/index.tsx":"10","/Users/leon/Projects/pumpkin-react/src/pages/SpotifyCallbackHandler/index.tsx":"11","/Users/leon/Projects/pumpkin-react/src/util.ts":"12","/Users/leon/Projects/pumpkin-react/src/components/Loading/index.tsx":"13","/Users/leon/Projects/pumpkin-react/src/components/SwipeCard/index.tsx":"14","/Users/leon/Projects/pumpkin-react/src/components/SongSwiper/index.tsx":"15","/Users/leon/Projects/pumpkin-react/src/components/PlayButton/index.tsx":"16","/Users/leon/Projects/pumpkin-react/src/components/PlusButton/index.tsx":"17","/Users/leon/Projects/pumpkin-react/src/pages/SpotifyLogin/index.tsx":"18","/Users/leon/Projects/pumpkin-react/src/components/CreatePlaylistDialog/index.tsx":"19","/Users/leon/Projects/pumpkin-react/src/pages/PlaylistCreated/index.tsx":"20","/Users/leon/Projects/pumpkin-react/src/components/BasePage/index.tsx":"21","/Users/leon/Projects/pumpkin-react/src/components/Button/index.tsx":"22","/Users/leon/Projects/pumpkin-react/src/components/LoadingSpinner/index.tsx":"23","/Users/leon/Projects/pumpkin-react/src/components/TextInput/index.tsx":"24"},{"size":500,"mtime":1609599587485,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1609428848843,"results":"27","hashOfConfig":"26"},{"size":1947,"mtime":1609939006046,"results":"28","hashOfConfig":"26"},{"size":3730,"mtime":1609689966894,"results":"29","hashOfConfig":"26"},{"size":984,"mtime":1609608283854,"results":"30","hashOfConfig":"26"},{"size":1290,"mtime":1609690061424,"results":"31","hashOfConfig":"26"},{"size":993,"mtime":1609874032451,"results":"32","hashOfConfig":"26"},{"size":1687,"mtime":1609933750120,"results":"33","hashOfConfig":"26"},{"size":9200,"mtime":1609933819948,"results":"34","hashOfConfig":"26"},{"size":1747,"mtime":1609875419837,"results":"35","hashOfConfig":"26"},{"size":1336,"mtime":1609610045511,"results":"36","hashOfConfig":"26"},{"size":110,"mtime":1609586629134,"results":"37","hashOfConfig":"26"},{"size":914,"mtime":1609933819948,"results":"38","hashOfConfig":"26"},{"size":1913,"mtime":1609936507374,"results":"39","hashOfConfig":"26"},{"size":681,"mtime":1609597592679,"results":"40","hashOfConfig":"26"},{"size":410,"mtime":1609868530214,"results":"41","hashOfConfig":"26"},{"size":303,"mtime":1609603764207,"results":"42","hashOfConfig":"26"},{"size":612,"mtime":1609672919131,"results":"43","hashOfConfig":"26"},{"size":1020,"mtime":1609941707380,"results":"44","hashOfConfig":"26"},{"size":880,"mtime":1609941524983,"results":"45","hashOfConfig":"26"},{"size":1214,"mtime":1609941014033,"results":"46","hashOfConfig":"26"},{"size":501,"mtime":1609874461958,"results":"47","hashOfConfig":"26"},{"size":298,"mtime":1609877675289,"results":"48","hashOfConfig":"26"},{"size":383,"mtime":1609939200539,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"11kbe7z",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/leon/Projects/pumpkin-react/src/index.tsx",[],["104","105"],"/Users/leon/Projects/pumpkin-react/src/reportWebVitals.ts",[],"/Users/leon/Projects/pumpkin-react/src/App.tsx",[],"/Users/leon/Projects/pumpkin-react/src/api/pumpkin.ts",[],"/Users/leon/Projects/pumpkin-react/src/state.ts",[],"/Users/leon/Projects/pumpkin-react/src/api/spotify.ts",[],"/Users/leon/Projects/pumpkin-react/src/pages/Landing/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/pages/CreateLink/index.tsx",["106","107","108"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Flex, Heading, Text, Spacer, Box } from \"@chakra-ui/react\";\nimport { Redirect } from \"react-router-dom\";\nimport { createShareLink } from \"../../api/pumpkin\";\nimport { GlobalStateContext, SpotifyState } from \"../../state\";\nimport { BasePage } from \"../../components/BasePage\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\n\nfunction CreateLinkPage() {\n  const globalState = useContext(GlobalStateContext);\n  const spotifyState: SpotifyState = globalState.spotify;\n  const setPumpkinState = globalState.setPumpkinState;\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      if (spotifyState.accessToken) {\n        const shareLink = await createShareLink(spotifyState.accessToken);\n        setPumpkinState({ shareLink: shareLink });\n        setLoading(false);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!spotifyState.accessToken) {\n    console.error(\"no Spotify accessToken available\");\n    return (\n      <>\n        <Redirect to=\"/login\" />\n      </>\n    );\n  }\n\n  if (!loading) {\n    return <Redirect to=\"/link-created\" />;\n  }\n  return (\n    <BasePage>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n        as=\"section\"\n      >\n        <Heading\n          size=\"xl\"\n          borderBottom=\"3px solid #000\"\n          paddingBottom=\"4px\"\n          marginBottom=\"1.5em\"\n        >\n          Your link is being created...\n        </Heading>\n        <LoadingSpinner />\n      </Flex>\n    </BasePage>\n  );\n}\n\nexport { CreateLinkPage };\n","/Users/leon/Projects/pumpkin-react/src/pages/Share/index.tsx",["109","110"],"import React, { FC, useEffect, useState, useRef, useContext } from \"react\";\nimport { Link, Redirect, useParams } from \"react-router-dom\";\nimport {\n  fetchTracks,\n  fetchUser,\n  likeTrack,\n  SpotifyTrack,\n  SpotifyUser,\n  createPlaylist,\n} from \"../../api/pumpkin\";\nimport { Loading } from \"../../components/Loading\";\nimport { SwipeCard } from \"../../components/SwipeCard\";\nimport { SongSwiper } from \"../../components/SongSwiper\";\nimport { PlayButton } from \"../../components/PlayButton\";\nimport { PlusButton } from \"../../components/PlusButton\";\nimport { GlobalStateContext } from \"../../state\";\nimport { CustomDialog, StaticDialog } from \"react-st-modal\";\nimport { CreatePlaylistDialogContent } from \"../../components/CreatePlaylistDialog\";\nimport { fetchLoggedInUser } from \"../../api/spotify\";\nimport { Box, Flex, Heading, Spacer, Text } from \"@chakra-ui/react\";\nimport { BasePage } from \"../../components/BasePage\";\nimport \"./style.css\";\n\ninterface SharePagePathParams {\n  id: string;\n}\n\nconst SharePage: FC = () => {\n  const { id: libraryUserId } = useParams<SharePagePathParams>();\n  const spotifyAccessToken = useContext(GlobalStateContext).spotify.accessToken;\n\n  const [trackIndex, setTrackIndex] = useState<number>(0);\n  const [playing, setPlayling] = useState(false);\n  const [done, setDone] = useState(false);\n  const audioPlayer = useRef<HTMLAudioElement>(null);\n\n  const {\n    userId,\n    tracks,\n    libraryUser,\n    ratedAllTracks,\n    error,\n  } = useSharePageData(libraryUserId, trackIndex);\n\n  const currentTrack = tracks && tracks[trackIndex];\n  const nextTrack = tracks && tracks[trackIndex + 1];\n\n  // TODO: control player via useEffect only\n  useEffect(() => {\n    if (audioPlayer && audioPlayer.current) {\n      if (playing) {\n        audioPlayer.current.play();\n      } else {\n        audioPlayer.current.pause();\n      }\n    }\n  }, [trackIndex, playing]);\n\n  const onSwipe = (direction: string) => {\n    console.log(\"onSwipe: \" + direction);\n    if (direction === \"right\" && userId && libraryUserId && currentTrack) {\n      likeTrack(userId, libraryUserId, currentTrack.id);\n    } else {\n      console.log(\"onSwipe: \", userId, libraryUserId, currentTrack);\n    }\n  };\n\n  const onCardLeftScreen = async (myIdentifier: string) => {\n    console.log(\"onCardLeftScreen: \" + myIdentifier);\n    setTrackIndex(trackIndex + 1);\n  };\n\n  const togglePlayback = () => {\n    if (audioPlayer && audioPlayer.current) {\n      if (audioPlayer.current.paused) {\n        setPlayling(true);\n      } else {\n        setPlayling(false);\n      }\n    }\n  };\n\n  const onCreatePlaylist = (playlistName: string) => {\n    if (spotifyAccessToken && userId) {\n      console.log(\"onCreatePlaylist\");\n      createPlaylist(userId, libraryUserId, playlistName, spotifyAccessToken);\n      setDone(true);\n    } else {\n      throw Error(\n        \"Playlist could not be created. Spotify token or user ID not available.\"\n      );\n    }\n  };\n\n  const onButtonDone = async (closable?: boolean) => {\n    const playlistName = await CustomDialog(<CreatePlaylistDialogContent />, {\n      title: \"Create Playlist\",\n      showCloseIcon: closable || true,\n    });\n    if (playlistName && typeof playlistName === \"string\") {\n      onCreatePlaylist(playlistName);\n    }\n  };\n\n  if (!spotifyAccessToken) {\n    return (\n      <Redirect\n        to={`/login?destination=${encodeURIComponent(\n          window.location.pathname\n        )}`}\n      />\n    );\n  }\n\n  if (done) {\n    return <Redirect to=\"/playlist-created\" />;\n  }\n\n  if (ratedAllTracks) {\n    // TODO: only if there are liked tracks, else there are no tracks, so cancel everything\n    return (\n      <StaticDialog\n        isOpen={true}\n        title=\"Create Playlist\"\n        onAfterClose={(playlistName) => {\n          if (playlistName && typeof playlistName === \"string\") {\n            onCreatePlaylist(playlistName);\n          }\n        }}\n      >\n        <CreatePlaylistDialogContent />\n      </StaticDialog>\n    );\n  }\n\n  console.log(\"render: \", userId, libraryUserId, currentTrack);\n  return (\n    <BasePage>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n      >\n        <Loading\n          condition={() =>\n            currentTrack && userId && libraryUser && libraryUserId\n              ? true\n              : false\n          }\n          error={() => error}\n        >\n          {currentTrack && userId && libraryUser && libraryUserId && (\n            <>\n              <Text\n                width=\"100%\"\n                paddingLeft=\"10px\"\n                fontSize=\"2xl\"\n                marginTop=\".25em\"\n              >\n                Viewing {libraryUser.display_name}'s library\n              </Text>\n              <Spacer />\n              <Box as=\"section\" className=\"SharePage__swipe-container\">\n                <div className=\"SharePage__swipe-cards-wrapper\">\n                  <SongSwiper\n                    track={currentTrack}\n                    onSwipe={onSwipe}\n                    onCardLeftScreen={onCardLeftScreen}\n                  />\n                  {nextTrack && (\n                    <div className=\"SharePage__card-preview\">\n                      <SwipeCard track={nextTrack} />\n                    </div>\n                  )}\n                </div>\n                <audio\n                  src={currentTrack.preview_url as string}\n                  ref={audioPlayer}\n                  onEnded={() => setPlayling(false)}\n                />\n                <Flex flexDirection=\"row\">\n                  <PlayButton onClick={togglePlayback} playing={playing} />\n                  <Box width=\"60px\" />\n                  <PlusButton onClick={onButtonDone} />\n                </Flex>\n              </Box>\n              <Spacer />\n            </>\n          )}\n        </Loading>\n      </Flex>\n    </BasePage>\n  );\n};\n\nfunction useSharePageData(libraryUserId: string, trackIndex: number) {\n  const { user, error: userError } = useLoggedInUser();\n\n  const { user: libraryUser, error: libraryUserError } = useUserData(\n    libraryUserId\n  );\n\n  const { tracks, ratedAllTracks, error: trackError } = useTrackPagination(\n    libraryUserId,\n    trackIndex\n  );\n\n  return {\n    userId: user?.id,\n    libraryUser,\n    tracks,\n    ratedAllTracks,\n    error: userError || libraryUserError || trackError,\n  };\n}\n\nfunction useUserData(userId: string) {\n  const [error, setError] = useState(null);\n  const [user, setUser] = useState<SpotifyUser | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const user = await fetchUser(userId);\n        setUser(user);\n      } catch (e) {\n        setError(e);\n      }\n    })();\n  }, [userId]);\n\n  return { user, error };\n}\n\nfunction useLoggedInUser() {\n  const [error, setError] = useState<Error | null>(null);\n  const [fetching, setFetching] = useState(false);\n  const { user, accessToken } = useContext(GlobalStateContext).spotify;\n  const setSpotifyState = useContext(GlobalStateContext).setSpotifyState;\n  useEffect(() => {\n    (async () => {\n      if (!fetching && !user) {\n        if (accessToken) {\n          setFetching(true);\n          const loggedInUser = await fetchLoggedInUser(accessToken);\n          setSpotifyState({ user: loggedInUser });\n          setError(null);\n          setFetching(false);\n        } else {\n          setError(Error(\"no access token available to fetch user\"));\n        }\n      }\n    })();\n  }, [user, accessToken, fetching, setSpotifyState]);\n  return { user, error };\n}\n\nfunction useTrackPagination(libraryUserId: string, trackIndex: number) {\n  const [error, setError] = useState(null);\n  const [tracks, setTracks] = useState<Record<number, SpotifyTrack>>({});\n  const [fetchedAllTracks, setFetchedAllTracks] = useState(false);\n  const [fetchingTracks, setFetchingTracks] = useState(false);\n\n  const availableIndecies = Object.keys(tracks);\n  const lastAvailableIndex =\n    availableIndecies.length > 0\n      ? Math.max(...availableIndecies.map((k) => parseInt(k, 10)))\n      : -1;\n\n  useEffect(() => {\n    (async () => {\n      if (\n        !fetchedAllTracks &&\n        !fetchingTracks &&\n        lastAvailableIndex - trackIndex <= 2\n      ) {\n        try {\n          setFetchingTracks(true);\n          const fetchIndex = lastAvailableIndex + 1;\n          const newTracks = await fetchTracks(libraryUserId, fetchIndex, 3);\n          if (newTracks.length === 0) {\n            setFetchedAllTracks(true);\n            return;\n          }\n          const newTracksRecord: Record<number, SpotifyTrack> = {};\n          newTracks.forEach((t: SpotifyTrack, i: number) => {\n            newTracksRecord[fetchIndex + i] = t;\n          });\n          const updatedTracks: Record<number, SpotifyTrack> = {\n            ...tracks,\n            ...newTracksRecord,\n          };\n          setTracks(updatedTracks);\n          setFetchingTracks(false);\n        } catch (e) {\n          setError(e);\n        }\n      }\n    })();\n  }, [\n    libraryUserId,\n    trackIndex,\n    tracks,\n    fetchingTracks,\n    fetchedAllTracks,\n    lastAvailableIndex,\n  ]);\n  const ratedAllTracks = fetchedAllTracks && trackIndex > lastAvailableIndex;\n  return { tracks, ratedAllTracks, error };\n}\n\nexport { SharePage };\n","/Users/leon/Projects/pumpkin-react/src/pages/LinkCreated/index.tsx",["111"],"import { Flex, Heading, Text, Spacer, Box } from \"@chakra-ui/react\";\nimport React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { BasePage } from \"../../components/BasePage\";\nimport { GlobalStateContext } from \"../../state\";\nimport { Button } from \"../../components/Button\";\n\nfunction LinkCreatedPage() {\n  const shareLink = useContext(GlobalStateContext).pumpkin.shareLink;\n  const [copied, setCopied] = useState(false);\n\n  if (!shareLink) {\n    console.error(\"no shareLink available\");\n    return (\n      <>\n        <Redirect to=\"/\" />\n      </>\n    );\n  }\n\n  const copyLink = () => {\n    navigator.clipboard.writeText(shareLink);\n    setCopied(true);\n    console.log(\"setCopied called\");\n  };\n  console.log(\"copied: \", copied);\n\n  return (\n    <BasePage>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n        as=\"section\"\n      >\n        <Heading\n          size=\"xl\"\n          borderBottom=\"3px solid #000\"\n          paddingBottom=\"4px\"\n          marginBottom=\"1.5em\"\n        >\n          Your link has been created\n        </Heading>\n        <Flex\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <Text\n            background=\"black\"\n            color=\"white\"\n            padding=\".7em .85em .7em .85em\"\n            borderRadius=\"0.375rem;\"\n          >\n            {shareLink}\n          </Text>\n          <Box width=\"1em\" height=\"1em\" />\n          <Button onClick={copyLink} width=\"8em\" height=\"2.6em\">\n            {copied ? \"Copied\" : \"Copy Link\"}\n          </Button>\n        </Flex>\n      </Flex>\n    </BasePage>\n  );\n}\n\nexport { LinkCreatedPage };\n","/Users/leon/Projects/pumpkin-react/src/pages/SpotifyCallbackHandler/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/util.ts",[],["112","113"],"/Users/leon/Projects/pumpkin-react/src/components/Loading/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/SwipeCard/index.tsx",["114","115"],"import React, { FC } from \"react\";\nimport { SpotifyTrack } from \"../../api/pumpkin\";\nimport { Box, Flex, Grid, SimpleGrid, Text } from \"@chakra-ui/react\";\n\ninterface SwipeCardProps {\n  track: SpotifyTrack;\n}\n\nconst cardWidthVw = 80;\nconst descriptionHeightVw = 20;\nconst cardMaxWidthEm = 24;\nconst descriptionMaxHeightEm =\n  (descriptionHeightVw / cardWidthVw) * cardMaxWidthEm;\n\nconst SwipeCard: FC<SwipeCardProps> = (props) => {\n  const { track } = props;\n  const trackName =\n    track.name.length > 70 ? track.name.substr(0, 75) + \" ...\" : track.name;\n\n  return (\n    <Box\n      width={`${cardWidthVw}vw`}\n      height={`${cardWidthVw + descriptionHeightVw}vw`}\n      maxHeight={`${cardMaxWidthEm + descriptionMaxHeightEm}em`}\n      maxWidth={`${cardMaxWidthEm}em`}\n      backgroundColor=\"black\"\n      color=\"white\"\n      borderRadius=\"10px\"\n      overflow=\"hidden\"\n      boxShadow=\"0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.2)\"\n    >\n      <Box\n        width={`${cardWidthVw}vw`}\n        height={`${cardWidthVw}vw`}\n        maxHeight={`${cardMaxWidthEm}em`}\n        maxWidth={`${cardMaxWidthEm}em`}\n        borderRadius=\"10px 10px 0 0\"\n        backgroundImage={`url(${track.album.images[0].url})`}\n        backgroundSize=\"cover\"\n      />\n      <Grid\n        columns={1}\n        alignContent=\"center\"\n        padding=\"0 1em\"\n        height={`${descriptionHeightVw}vw`}\n        maxHeight={`${descriptionMaxHeightEm}em`}\n      >\n        <Text fontSize={{ base: \"1em\", md: \"1.25em\" }} isTruncated width=\"100%\">\n          {trackName}\n        </Text>\n        {track.album.artists[0] && (\n          <Text\n            fontSize={{ base: \"1em\", md: \"1.25em\" }}\n            fontWeight=\"700\"\n            isTruncated\n            width=\"100%\"\n          >\n            {track.album.artists.map((a) => a.name).join(\", \")}\n          </Text>\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport { SwipeCard };\n","/Users/leon/Projects/pumpkin-react/src/components/SongSwiper/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/PlayButton/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/PlusButton/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/pages/SpotifyLogin/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/CreatePlaylistDialog/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/pages/PlaylistCreated/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/BasePage/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/Button/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/LoadingSpinner/index.tsx",[],"/Users/leon/Projects/pumpkin-react/src/components/TextInput/index.tsx",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":25,"nodeType":"122","messageId":"123","endLine":2,"endColumn":29},{"ruleId":"120","severity":1,"message":"124","line":2,"column":31,"nodeType":"122","messageId":"123","endLine":2,"endColumn":37},{"ruleId":"120","severity":1,"message":"125","line":2,"column":39,"nodeType":"122","messageId":"123","endLine":2,"endColumn":42},{"ruleId":"120","severity":1,"message":"126","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":14},{"ruleId":"120","severity":1,"message":"127","line":20,"column":21,"nodeType":"122","messageId":"123","endLine":20,"endColumn":28},{"ruleId":"120","severity":1,"message":"124","line":1,"column":31,"nodeType":"122","messageId":"123","endLine":1,"endColumn":37},{"ruleId":"116","replacedBy":"128"},{"ruleId":"118","replacedBy":"129"},{"ruleId":"120","severity":1,"message":"130","line":3,"column":15,"nodeType":"122","messageId":"123","endLine":3,"endColumn":19},{"ruleId":"120","severity":1,"message":"131","line":3,"column":27,"nodeType":"122","messageId":"123","endLine":3,"endColumn":37},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","'Spacer' is defined but never used.","'Box' is defined but never used.","'Link' is defined but never used.","'Heading' is defined but never used.",["132"],["133"],"'Flex' is defined but never used.","'SimpleGrid' is defined but never used.","no-global-assign","no-unsafe-negation"]